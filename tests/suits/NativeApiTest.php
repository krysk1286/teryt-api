<?php
/**
 * TERYT-API
 *
 * Copyright (c) 2019 pudelek.org.pl
 *
 * @license MIT License (MIT)
 *
 * For the full copyright and license information, please view source file
 * that is bundled with this package in the file LICENSE
 * @author Marcin Pudełek <marcin@pudelek.org.pl>
 */

/**
 * Created by Marcin.
 * Date: 09.09.2017
 * Time: 20:12
 */

namespace Tests\mrcnpdlk\Teryt;

use DateTime;
use mrcnpdlk\Teryt\Client;
use mrcnpdlk\Teryt\Config;
use mrcnpdlk\Teryt\NativeApi;
use mrcnpdlk\Teryt\ResponseModel\Territory\JednostkaNomenklaturyNTS;
use mrcnpdlk\Teryt\ResponseModel\Territory\JednostkaTerytorialna;
use mrcnpdlk\Teryt\ResponseModel\Territory\ZweryfikowanyAdresBezUlic;
use SplFileObject;

class NativeApiTest extends TestCase
{
    /**
     * @var \mrcnpdlk\Teryt\NativeApi
     */
    private $oNativeApi;
    /**
     * @var Config
     */
    private $oConfig;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->oConfig    = new Config();
        $this->oNativeApi = NativeApi::create($this->oConfig);
    }

    public function testCatalog(): void
    {
        $oFile      = $this->oNativeApi->PobierzKatalogWMRODZ();

        $this->assertInstanceOf(SplFileObject::class, $oFile);
        $this->assertEquals(true, file_exists($oFile->getPath()));
        $this->assertEquals(true, is_readable($oFile->getPath()));
    }

    public function testChanges(): void
    {
        $fromDate   = new DateTime();
        $toDate     = new DateTime();
        $oFile      = $this->oNativeApi->PobierzZmianyTercAdresowy($fromDate->modify('-14 day'), $toDate);

        $this->assertInstanceOf(SplFileObject::class, $oFile);
        $this->assertEquals(true, file_exists($oFile->getPath()));
        $this->assertEquals(true, is_readable($oFile->getPath()));
    }

    public function testTerc(): void
    {
        $tResp =  $this->oNativeApi->PobierzListeWojewodztw();
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePowiatow('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeGmin('10', '06');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzGminyiPowDlaWoj('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);
    }

    public function testNTS(): void
    {
        $tResp =  $this->oNativeApi->PobierzListeRegionow();
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeWojewodztwWRegionie('1');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePodregionow('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePowiatowWPodregionie('19');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeGminPowiecie('15', '19');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);
    }

    public function testDictionary(): void
    {
        $tResp = $this->oNativeApi->PobierzSlownikCechULIC();
        $this->assertEquals(true, is_array($tResp));
        $tResp = $this->oNativeApi->PobierzSlownikRodzajowSIMC();
        $this->assertEquals(true, is_array($tResp));
        $tResp = $this->oNativeApi->PobierzSlownikCechULIC();
        $this->assertEquals(true, is_array($tResp));
    }

    public function testVerification(): void
    {
        $oResp = $this->oNativeApi->WeryfikujAdresDlaMiejscowosci('0976050');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $oResp = $this->oNativeApi->WeryfikujAdresDlaMiejscowosciAdresowy('0976050');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $tResp = $this->oNativeApi->WeryfikujAdresWmiejscowosci('łódzkie', 'sieradzki', 'sieradz', 'sieradz', null);
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $tResp[0]);
        $tResp = $this->oNativeApi->WeryfikujAdresWmiejscowosciAdresowy('łódzkie', 'sieradzki', 'sieradz', 'sieradz', null);
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $tResp[0]);

        $oResp = $this->oNativeApi->WeryfikujAdresDlaUlic('0976050', '00157');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $oResp = $this->oNativeApi->WeryfikujAdresDlaUlicAdresowy('0976050', '00157');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
    }
}
