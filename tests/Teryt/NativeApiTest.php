<?php
/**
 * TERYT-API
 *
 * Copyright (c) 2017 pudelek.org.pl
 *
 * @license MIT License (MIT)
 *
 * For the full copyright and license information, please view source file
 * that is bundled with this package in the file LICENSE
 *
 * @author  Marcin Pudełek <marcin@pudelek.org.pl>
 *
 */

/**
 * Created by Marcin.
 * Date: 09.09.2017
 * Time: 20:12
 */

namespace mrcnpdlk\Teryt;

use mrcnpdlk\Teryt\ResponseModel\Territory\JednostkaNomenklaturyNTS;
use mrcnpdlk\Teryt\ResponseModel\Territory\JednostkaTerytorialna;
use mrcnpdlk\Teryt\ResponseModel\Territory\ZweryfikowanyAdresBezUlic;

class NativeApiTest extends TestCase
{
    /**
     * @var \mrcnpdlk\Teryt\NativeApi
     */
    private $oNativeApi;
    /**
     * @var Client
     */
    private $oClient;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->oClient    = new \mrcnpdlk\Teryt\Client();
        $this->oNativeApi = NativeApi::create($this->oClient);
    }

    public function testCatalog()
    {
        $oFile      = $this->oNativeApi->PobierzKatalogWMRODZ();

        $this->assertInstanceOf(\SplFileObject::class, $oFile);
        $this->assertEquals(true, file_exists($oFile->getPath()));
        $this->assertEquals(true, is_readable($oFile->getPath()));
    }

    public function testChanges()
    {
        $fromDate   = new \DateTime();
        $toDate     = new \DateTime();
        $oFile      = $this->oNativeApi->PobierzZmianyTercAdresowy($fromDate->modify('-14 day'), $toDate);

        $this->assertInstanceOf(\SplFileObject::class, $oFile);
        $this->assertEquals(true, file_exists($oFile->getPath()));
        $this->assertEquals(true, is_readable($oFile->getPath()));
    }

    public function testTerc(){
        $tResp =  $this->oNativeApi->PobierzListeWojewodztw();
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePowiatow('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeGmin('10','06');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzGminyiPowDlaWoj('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaTerytorialna::class, $tResp[0]);
    }

    public function testNTS(){
        $tResp =  $this->oNativeApi->PobierzListeRegionow();
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeWojewodztwWRegionie('1');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePodregionow('10');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListePowiatowWPodregionie('19');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);

        $tResp =  $this->oNativeApi->PobierzListeGminPowiecie('15','19');
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(JednostkaNomenklaturyNTS::class, $tResp[0]);
    }

    public function testDictionary()
    {
        $tResp = $this->oNativeApi->PobierzSlownikCechULIC();
        $this->assertEquals(true, is_array($tResp));
        $tResp = $this->oNativeApi->PobierzSlownikRodzajowSIMC();
        $this->assertEquals(true, is_array($tResp));
        $tResp = $this->oNativeApi->PobierzSlownikCechULIC();
        $this->assertEquals(true, is_array($tResp));
    }

    public function testVerification()
    {
        $oResp = $this->oNativeApi->WeryfikujAdresDlaMiejscowosci('0976050');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $oResp = $this->oNativeApi->WeryfikujAdresDlaMiejscowosciAdresowy('0976050');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $tResp = $this->oNativeApi->WeryfikujAdresWmiejscowosci('łódzkie','sieradzki','sieradz','sieradz',null);
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $tResp[0]);
        $tResp = $this->oNativeApi->WeryfikujAdresWmiejscowosciAdresowy('łódzkie','sieradzki','sieradz','sieradz',null);
        $this->assertEquals(true, is_array($tResp));
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $tResp[0]);

        $oResp = $this->oNativeApi->WeryfikujAdresDlaUlic('0976050','00157');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);
        $oResp = $this->oNativeApi->WeryfikujAdresDlaUlicAdresowy('0976050','00157');
        $this->assertInstanceOf(ZweryfikowanyAdresBezUlic::class, $oResp);

    }

}
